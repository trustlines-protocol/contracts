version: 2.1

templates:
  tagged-filter: &tagged-filter
    tags:
      only: /^[0-9]+(\.[0-9]+)*((a|b|rc)[0-9]+)?(\.dev[0-9]+)?/

executors:
  ubuntu-builder:
    docker:
      - image: trustlines/builder:master61
        environment:
          - SOLC_VERSION=v0.8.0
    working_directory: ~/repo
    environment:
      DOCKER_REPO: trustlines/contracts
      LOCAL_IMAGE: contracts

# define some common commands
# see https://circleci.com/docs/2.0/configuration-reference/#commands-requires-version-21
commands:
  create-venv:
    description: "Create venv"
    parameters:
      python-version:
        default: "3.8"
        type: string
    steps:
      - run:
          name: Create python venv
          command: |
            python<<parameters.python-version>> -m venv venv
            pip install -U pip wheel setuptools

  config-path:
    description: "set environment variables and change PATH"
    steps:
    - run:
        name: Configuring PATH
        command: |
          echo >> ${BASH_ENV} 'export PATH=~/bin:~/repo/venv/bin:~/.cargo/bin:${PATH}'
          echo >> ${BASH_ENV} '. ~/.nvm/nvm.sh'

  install:
    description: "Install the requirements and the checked out source"
    parameters:
      python-version:
        default: "3.8"
        type: string
    steps:
      - checkout
      - config-path
      - restore_cache:
          key: venv-<<parameters.python-version>>-{{ checksum "dev-requirements.txt" }}
      - create-venv:
          python-version: <<parameters.python-version>>
      - run:
          name: Install requirements
          command: |
            make install-requirements
      - save_cache:
          key: venv-<<parameters.python-version>>-{{ checksum "dev-requirements.txt" }}
          paths:
            - venv
            - .requirements-installed
      - run:
          name: Install py-bin/py-deploy
          command: |
            make install
      - run:
          name: Build python distributions
          command: |
            make dist
      - run:
          name: Verify installed packages have compatible dependencies
          command: |
            pip check

  publish-npm:
    description: Publish npm package
    parameters:
      tag:
        type: string
    steps:
      - run:
          name: Set authentication token
          command: |
            echo >> ~/.npmrc "//registry.npmjs.org/:_authToken=$NPM_TOKEN"
      - run:
          name: Set npm version
          command: |
            cd py-bin
            ./set_npm_version.sh
            cd ..
      - run:
          command: |
            cd py-bin
            npm publish --tag << parameters.tag >>

jobs:
  run-flake8:
    executor: ubuntu-builder

    steps:
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Run flake8
          command: |
            flake8 py-bin py-deploy tests

  run-black:
    executor: ubuntu-builder

    steps:
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Run black
          command: |
            black --check py-bin py-deploy tests

  install-py38:
    executor: ubuntu-builder
    steps:
      - install:
          python-version: "3.8"
      - persist_to_workspace:
          root: "~"
          paths:
            - repo

  install-py39:
    executor: ubuntu-builder
    steps:
      - install:
          python-version: "3.9"

  check-sdist:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Check distribution
          command: |
            twine check py-bin/dist/* py-deploy/dist/*

  upload-pypi:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USER" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Upload to pypi
          command: |
            twine upload py-bin/dist/* py-deploy/dist/*

  upload-npm-dev:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-path
      - publish-npm:
          tag: "dev"

  upload-npm-latest:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-path
      - publish-npm:
          tag: "latest"


  run-pytest:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Run pytest
          command: pytest

  run-mypy:
    executor: ubuntu-builder
    steps:
      - attach_workspace:
          at: '~'
      - config-path
      - run:
          name: Run mypy
          command: |
            mypy --ignore-missing-imports py-deploy/tldeploy tests

  build-docker-image:
    executor: ubuntu-builder

    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build docker image
          command: |
            docker build . -t $LOCAL_IMAGE
      - run:
          name: Save docker image
          command: |
            mkdir -p ~/images
            docker save --output ~/images/$LOCAL_IMAGE.tar $LOCAL_IMAGE
      - persist_to_workspace:
          root: "~"
          paths:
            - images

  run-smoketests:
    executor: ubuntu-builder
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: '~'
      - checkout
      - run:
          name: Load docker image
          command: |
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: Run smoketests
          command: |
            ./run-docker-smoketest

  deploy-docker-image:
    executor: ubuntu-builder
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: '~'
      - run:
          name: Load docker image
          command: |
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: Login to dockerhub
          command: |
            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
      - run:
          name: Upload tagged release
          command: |
            version=$(docker run --rm --entrypoint '' $LOCAL_IMAGE cat VERSION | tr '+' '_')
            echo "Tagging with $version"
            docker tag $LOCAL_IMAGE $DOCKER_REPO:$version
            docker push $DOCKER_REPO:$version
      - run:
          name: Upload latest
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO:latest
            docker push $DOCKER_REPO:latest

  run-end2end-tests:
    executor: ubuntu-builder
    working_directory: ~
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: '~'
      - run:
          name: Checkout end2end repo
          command: |
            git clone https://github.com/trustlines-protocol/end2end.git
      - run:
          name: Load docker image
          command: |
            docker load --input ~/images/$LOCAL_IMAGE.tar
      - run:
          name: run end2end tests
          command: |
            docker tag $LOCAL_IMAGE $DOCKER_REPO
            cd end2end
            ./run-e2e.sh

workflows:
  version: 2
  default:
    jobs:
      - run-flake8:
          requires:
            - install-py38
          filters:
            <<: *tagged-filter

      - run-black:
          requires:
            - install-py38
          filters:
            <<: *tagged-filter

      - run-mypy:
          requires:
            - install-py38
          filters:
            <<: *tagged-filter

      - install-py38:
          filters:
            <<: *tagged-filter

      - install-py39:
          filters:
            <<: *tagged-filter

      - run-pytest:
          filters:
            <<: *tagged-filter
          requires:
            - install-py38

      - upload-npm-dev: &upload-npm
          context: npm-credentials
          filters:
            branches:
              only:
                - master
          requires:
            - run-flake8
            - run-black
            - run-mypy
            - install-py38
            - run-pytest
            - run-smoketests

      - upload-npm-latest:
          <<: *upload-npm
          filters:
            <<: *tagged-filter
            branches:
              ignore: /.*/

      - check-sdist:
          filters:
            <<: *tagged-filter
          requires:
            - install-py38

      - upload-pypi:
          context: pypi-credentials
          filters:
            <<: *tagged-filter
            branches:
              ignore: /.*/
          requires:
            - run-flake8
            - run-black
            - run-mypy
            - run-pytest
            - install-py38
            - run-smoketests

      - build-docker-image:
          filters:
            <<: *tagged-filter

      - run-smoketests:
          filters:
            <<: *tagged-filter
          requires:
            - build-docker-image

      - deploy-docker-image:
          context: docker-credentials
          filters:
            <<: *tagged-filter
            branches:
              only: master
          requires:
            - run-flake8
            - run-black
            - run-pytest
            - run-mypy
            - install-py38
            - build-docker-image
            - run-smoketests

      - run-end2end-tests:
          filters:
            <<: *tagged-filter
          requires:
            - build-docker-image
